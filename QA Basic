was ist QA? Qualitätsicherung

Sichern ob angegebene anforderungen erfühlt sind.
Sicherstellung, dass das Produkt möglich weniger fehler hat.
Testen = alles was Code enthält  (Kaffemachinen, Röntgengeräte, Smart geräte...)
"Bugs" - defekte, Error,  finden und Bugs fix , Bugs free

Aufgaben:
Testaktivitäten, Prioriteten setzen, Planen, Koordineren.
Uberprufen, erstellen Testpläne und Testfälle.
Test durchführen, Probleme sichern.
Testergebnisse sameln, Analysieren.
Schlagen sie verbeserungen vor.


"Patches"  Code linien . Softwareaktualisierung

######

Waterfall SDLC Model Phaasen: 
Analyse -> Entfurf -> program -> Testing -> wartung


*Anforderungen erstellen- Dokumenentiert und Vollstendig verstanden -> Anforderungen durchführen ,Spätere Vehler minimieren.
*Design- System/softwere design wird basierend, anforderungen erstellt.-> designrewius uberprufen
*Implementieren/ Development - Code wird geschrioeben -> Unitesting
*Integration und Test - Testing - Implemrntid modules werden Inegriert getestet -> Funktionale Testing systemtest
*ereitstellung/ deployment- Die Softwere wird ausgelifert -> Akzeptanztest, Smoke Test
*Wartung/Maintenance - Fehlerbehebung und Systemanpassungnach dem Deployment -> Regresionstest, Sicherstellung dass keine fehler einfuht

Vorteile : Klar Struktur, Planbakeit.
Nachteile: Später fehlerentdekung, geringe Flexibilität,Schwer zu aktualisieren. 

########

 Agile:

Agile ermöglicht es, sich an Änderungen in Anforderungen oder Prioritäten anzupassen, selbst spät in der Entwicklung.
epos -> geschichte -> entwiklung -> prufen -> einsetzen rezension


*Auf verönderungen reagieren
*Agiule ist für Startups -> Ändern und Anpassen
*MVP- Minimalviable Product . Mindestensfunktionalität
*Scrum, Schift right -> Kleine und große
*keine ausweg

Vorteile:

*Kundenzentrierung:
  Durch kontinuierliches Feedback
*Schnellere Lieferung:
*Verbesserte Zusammenarbeit:
  klare Kommunikationswege. tägliche Stand-Ups.
*Weniger Risiko:
  Probleme frühzeitig erkannt und behoben werden.
*Motivierte Teams:
  Selbstorganisierte Teams, Kreativität.
*Transparenz:
  Alle Stakeholder sind regelmäßig informiert, was den Fortschritt und den aktuellen Stand betrifft.

Nachteile:

*Mangelnde Planungssicherheit:
*Abhängigkeit von Engagement:
   eine hohe Beteiligung und Disziplin von allen Beteiligten, einschließlich Kunden.
*Skalierungsprobleme:
   großen oder komplexen Projekten kann die Koordination zwischen mehreren Teams schwierig werden.

*Erhöhter Kommunikationsaufwand:
  Regelmäßige Meetings und intensive.

*Erfahrung des Teams:
  Unerfahrene Mitglieder können Schwierigkeiten haben.

*Ressourcenintensiv:
  Ständige Anpassungen und Änderungen können zusätzliche Kosten verursachen.

*Unklare Rollenverteilung:
  Bei unzureichender Organisation kann es zu Konflikten oder Unklarheiten über Verantwortlichkeiten kommen.

###########

Scrum SDLC:

*hierarchy: 6-9 person (Interdisziplinierte Team) 
*Große project in kleine Aufgaben zerlegt (1-4 woche)
*daly Stand up: 15 min. bespr. (probleme , augaben aufteilung)
*Feedback, Verbeserung

#####
Kanban und Lean SDLC

*Visualisierung der Arbeit. (z. B. "To Do", "In Progress", "Done").
  Trello,Jira,Asana.

#####
shift Left / Right Methologie:

Shift Left
Qualitätssicherung wird frühzeitig in den Entwicklungsprozess integriert, um Fehler schnell und kostengünstig zu erkennen und zu beheben.
Ziel: Prävention.    (Unitest)

Shift Right
Qualitätssicherung erfolgt nach der Softwarefreigabe durch Monitoring, Nutzerfeedback und Tests in der Produktionsumgebung. 
Ziel: Anpassung und Optimierung.

Beide Ansätze ergänzen sich und fördern durchgehende Qualität.










